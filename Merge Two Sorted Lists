/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l2==null) return l1;
        if(l1==null) return l2;
        ListNode p1 = new ListNode(0);
        ListNode head = new ListNode(0);
        ListNode temp1 = new ListNode(0);
        ListNode temp2 = new ListNode(0);
        p1.next = l1;
        ListNode p2 = l2;
        if(p1.next.val<=p2.val){
            head.next = l1;
        }
        else
            head.next = l2;
        while(p1.next!=null&&p2!=null){
            if(p1.next.val<=p2.val){
                p1 = p1.next;
            }
            else{
                temp1 = p1.next;
                temp2 = p2.next;
                p1.next = p2;
                p2.next = temp1;
                p1 = p2;
                p2 = temp2;
            }
        }
        if(p2!=null){
            p1.next = p2;
        }
        return head.next;
    }
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l2==null) return l1;
        if(l1==null) return l2;
        
        if(l1.val<=l2.val){
            l1.next = mergeTwoLists(l1.next,l2);
            return l1;
        }
        else{
            l2.next = mergeTwoLists(l1,l2.next);
            return l2;
        }
    }
}
