public int minDepth(TreeNode root) {
    if(root == null) return 0;
    if(root.left == null && root.right == null){
        return 1;
    }
    else if(root.left != null && root.right != null){
        return Math.min(1+minDepth(root.left), 1+minDepth(root.right));
    }
    else if(root.left != null){
        return 1+minDepth(root.left);
    }
    else{
        return 1+minDepth(root.right);
    }
}


public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null)
            return 0;
        if(root.left==null&&root.right==null)
            return 1;
        else if(root.left!=null&&root.right!=null)
            return  Math.min(1+minDepth(root.left), 1+minDepth(root.right));
        else if(root.left!=null){
            return minDepth(root.left)+1;
        }
        else 
            return minDepth(root.right)+1;
    }
}





public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null)
            return 0;
        else if(root!=null&&root.left==null&&root.right==null)
            return 1;
        else if(root!=null&&root.left!=null&&root.right==null){
            return minDepth(root.left)+1;
        }
        else if(root!=null&&root.left==null&&root.right!=null){
            return minDepth(root.right)+1;
        }
        else{
            return  Math.min(1+minDepth(root.left), 1+minDepth(root.right));
        }
    }
}
