//前一种时间太长 超出范围
public class Solution {
	public int trap(int[] A) {
        int sum = 0;
        if(A.length==1){
        	return 0;
        }
		for(int i=0;i<A.length;i++){
        	sum +=	getRainWaterByStep(A,i);
        }
        return sum;	
    }
    	public int getRainWaterByStep(int A[],int step){
		int left = getLeftMax(A,step);
		int right = getRightMax(A,step);
		if(left==A[step]||right==A[step]){
			return 0;
		}else{
			return left<right? left-A[step]:right-A[step];
		}
	}
	
	
	public int getLeftMax(int[] A,int mid){
		int left = mid;
		int max = A[mid];
		while(left>=0){
			if(A[left]>max){
				max = A[left];
			}
			left--;
		}
		return max;
	}
	public int getRightMax(int[] A,int mid){
		int right = mid;
		int max = A[mid];
		while(right<A.length){
			if(A[right]>max){
				max = A[right];
			}
			right++;
		}
		return max;
	}
}







//方法二

public class Solution {
	public int trap(int[] A) {
        int sum = 0;
        if(A.length==1||A==null||A.length==0){
        	return 0;
        }
        int[] leftMax = getLeftMax(A);
        int[] rightMax = getRigthMax(A);
		for(int i=0;i<A.length;i++){
			if(leftMax[i]>A[i]&&rightMax[i]>A[i]){
				sum += (leftMax[i]<rightMax[i]? leftMax[i]-A[i]:rightMax[i]-A[i]);
			}
        }
        return sum;	
    }
    
	public int[] getLeftMax(int[] A){
		int[] leftMax = new int[A.length];
		int max = A[0];
		leftMax[0] = A[0];
		for(int i=1;i<A.length;i++){
			leftMax[i] = max;
			if(A[i]>max){
				max = A[i];
			}
		}
		return leftMax;
	}
	public int[] getRigthMax(int[] A){
		int[] rightMax = new int[A.length];
		int max = A[A.length-1];
		rightMax[A.length-1] = A[A.length-1];
		for(int i=A.length-2;i>=0;i--){
			rightMax[i] = max;
			if(A[i]>max){
				max = A[i];
			}
		}
		return rightMax;
	}
}
