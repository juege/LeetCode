/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root==null) return;
        Queue<TreeLinkNode> queue = new LinkedList<TreeLinkNode>();
        queue.add(root);
        while(queue.size()>0){
            Queue<TreeLinkNode> tempQueue = new LinkedList<TreeLinkNode>();
            while(queue.size()>0){
                tempQueue.add(queue.poll());
            }
            TreeLinkNode preNode = null;
            while(tempQueue.size()>0){
                TreeLinkNode node = tempQueue.poll();
                if(preNode==null){
                    node.next =null;
                }
                else{
                    node.next = preNode;
                }
                preNode = node;
                if(node.right!=null)
                    queue.add(node.right);
                if(node.left!=null)
                    queue.add(node.left);
            }
        }
        
    }
}
