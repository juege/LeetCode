/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        if(root==null)
            return lists;
        Queue<TreeNode> queue = new LinkedList();
        Queue<TreeNode> queue2 = new LinkedList();
        TreeNode treeNode = new TreeNode(0);
        queue.add(root);
        while(!queue.isEmpty()){
            queue2.add(queue.poll());
            if(!queue.isEmpty())
                continue;
            else{
                if(queue2.isEmpty())
                    break;
                else{
                    List<Integer> list = new ArrayList<Integer>();
                    while(!queue2.isEmpty()){
                        treeNode = queue2.poll();
                        list.add(treeNode.val);
                        if(treeNode.left!=null)
                            queue.add(treeNode.left);
                        if(treeNode.right!=null)
                            queue.add(treeNode.right);
                    }
                    lists.add(list);
                }
            }
        }
        return lists;
    }
}
